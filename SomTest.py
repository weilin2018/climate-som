from mvpa2.suite import *
import AreaAvgOverTime
import LoadDataYear
import GetDataMap

latRange = [35,38]
lonRange = [270,273]

somTrainingData = []


print 'loading data'
for year in range(1990, 2000):
    print year

    for x in range(latRange[0], latRange[1]):
        for y in range(lonRange[0], lonRange[1]):
            hussData = LoadDataYear.loadDataYear(year, 'gfdl-cm3', 'huss', reallat = x, reallon = y)
            tasmaxData = LoadDataYear.loadDataYear(year, 'gfdl-cm3', 'tasmax', reallat = x, reallon = y)

            for r in range(len(hussData[2])):
                element = []
                element.append(hussData[2][r])
                element.append(tasmaxData[2][r])
                somTrainingData.append(element)

somTrainingData = np.array(somTrainingData)

print 'initializing SOM mapper'
som = SimpleSOMMapper((10, 10), 200, learning_rate = 1e-5)

print 'training SOM'
som.train(somTrainingData)

print som.K
print somTrainingData[0]

"""
Each unit in the Kohonen layer can be treated as a pointer into the
high-dimensional input space, that can be queried to inspect which
input subspaces the SOM maps onto certain sections of its 2D output
space.  The color-mapping generated by this example's SOM can be shown
with a single matplotlib call:
"""

#for i in range(len(som.K)):
#    pl.imshow(som.K[i])
#    pl.show()

"""
And now, let's take a look onto which coordinates the initial training
prototypes were mapped to. The get those coordinates we can simply feed
the training data to the mapper and plot the output.
"""

#mapped = som(somTempData)

#pl.title('SOM')
# SOM's kshape is (rows x columns), while matplotlib wants (X x Y)
#for i, m in enumerate(mapped):
#    pl.text(m[1], m[0], dataNames[i], ha='center', va='center',
#           bbox=dict(facecolor='white', alpha=0.5, lw=0))

"""
The text labels of the original training colors will appear at the 'mapped'
locations in the SOM -- and should match with the underlying color.
"""

# show the figure
#if cfg.getboolean('examples', 'interactive', True):
#    pl.show()
